import React, { useState } from 'react';
import { Card } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Textarea } from "@/components/ui/textarea";
import { Input } from "@/components/ui/input";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";

export function DakshaCreate() {
    const [isGenerating, setIsGenerating] = useState(false);
    const [prompt, setPrompt] = useState('');
    const [result, setResult] = useState(null);
    const [mode, setMode] = useState('text');

    const generateContent = async () => {
        if (!prompt.trim()) return;

        setIsGenerating(true);

        try {
            // TODO: Implement API call to Daksha backend
            const response = await fetch('/api/daksha/create', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                    prompt,
                    mode
                }),
            });

            const data = await response.json();
            setResult(data);
        } catch (error) {
            console.error('Error:', error);
        } finally {
            setIsGenerating(false);
        }
    };

    return (
        <div className="p-6">
            <Tabs defaultValue="text" onValueChange={(value) => setMode(value)}>
                <TabsList className="grid w-full grid-cols-3 mb-8">
                    <TabsTrigger value="text">Text</TabsTrigger>
                    <TabsTrigger value="image">Image</TabsTrigger>
                    <TabsTrigger value="audio">Audio</TabsTrigger>
                </TabsList>

                <div className="mb-6">
                    <Card className="p-6">
                        <h2 className="text-2xl font-bold mb-4">
                            {mode === 'text' ? 'Generate Text Content' :
                                mode === 'image' ? 'Generate Image' : 'Generate Audio'}
                        </h2>
                        <Textarea
                            value={prompt}
                            onChange={(e) => setPrompt(e.target.value)}
                            placeholder={`Describe the ${mode} you want to create...`}
                            className="mb-4 min-h-[150px]"
                        />

                        {mode === 'image' && (
                            <div className="mb-4 space-y-2">
                                <h3 className="text-sm font-medium">Image Options</h3>
                                <div className="grid grid-cols-2 gap-4">
                                    <Input placeholder="Width (e.g., 512)" />
                                    <Input placeholder="Height (e.g., 512)" />
                                </div>
                                <Input placeholder="Style (e.g., photorealistic, cartoon, etc.)" />
                            </div>
                        )}

                        {mode === 'audio' && (
                            <div className="mb-4 space-y-2">
                                <h3 className="text-sm font-medium">Audio Options</h3>
                                <Input placeholder="Voice (e.g., male, female, neutral)" />
                            </div>
                        )}

                        <Button
                            onClick={generateContent}
                            disabled={!prompt.trim() || isGenerating}
                            className="w-full"
                        >
                            {isGenerating ? 'Creating...' : `Create ${mode.charAt(0).toUpperCase() + mode.slice(1)}`}
                        </Button>
                    </Card>
                </div>

                <TabsContent value="text" className="space-y-4">
                    {result && result.text && (
                        <Card className="p-6">
                            <h3 className="text-xl font-semibold mb-4">Generated Text</h3>
                            <div className="bg-gray-900 p-4 rounded-lg whitespace-pre-wrap">
                                {result.text}
                            </div>
                        </Card>
                    )}
                </TabsContent>

                <TabsContent value="image" className="space-y-4">
                    {result && result.imageUrl && (
                        <Card className="p-6">
                            <h3 className="text-xl font-semibold mb-4">Generated Image</h3>
                            <div className="flex justify-center">
                                <img
                                    src={result.imageUrl}
                                    alt="Generated by Daksha AI"
                                    className="max-h-[500px] rounded-lg"
                                />
                            </div>
                            <div className="mt-4 flex justify-center">
                                <Button variant="outline">Download Image</Button>
                            </div>
                        </Card>
                    )}
                </TabsContent>

                <TabsContent value="audio" className="space-y-4">
                    {result && result.audioUrl && (
                        <Card className="p-6">
                            <h3 className="text-xl font-semibold mb-4">Generated Audio</h3>
                            <audio controls className="w-full" src={result.audioUrl} />
                            <div className="mt-4 flex justify-center">
                                <Button variant="outline">Download Audio</Button>
                            </div>
                        </Card>
                    )}
                </TabsContent>
            </Tabs>
        </div>
    );
}
