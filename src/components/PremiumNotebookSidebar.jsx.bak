"use client";

import React, { useState, useEffect, Suspense } from 'react';
import { usePathname, useRouter, useSearchParams } from 'next/navigation';
import { useSession } from "next-auth/react";
import { motion, AnimatePresence } from 'framer-motion';
import { 
  Book, Calendar, User, Plus, Tag, ChevronRight, ChevronLeft, 
  ChevronDown, Menu, LogOut, MessageSquare, Settings, 
  Bookmark, Sparkles, Search, Zap, Bell 
} from 'lucide-react';
import { useTags } from '@/lib/hooks';
import { cn } from '@/lib/utils';
import { Button } from '@/components/ui/button';
import { ModeToggle } from '@/components/mode-toggle';
import { Input } from '@/components/ui/input';
import {
  Sheet,
  SheetContent,
  SheetTrigger,
} from "@/components/ui/sheet";
import { signOut } from "next-auth/react";
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar";
import { Badge } from "@/components/ui/badge";
import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from "@/components/ui/tooltip";

// Define a clean set of animation variants
const sidebarVariants = {
  expanded: { 
    width: 280,
    transition: { duration: 0.3, ease: "easeInOut" }
  },
  collapsed: { 
    width: 80,
    transition: { duration: 0.3, ease: "easeInOut" }
  }
};

const SidebarContent = ({ onClose, isCollapsed, onToggleCollapse }) => {
  const pathname = usePathname();
  const searchParams = useSearchParams();
  const router = useRouter();
  const { data: session } = useSession();
  
  const [showTags, setShowTags] = useState(false);
  const [searchQuery, setSearchQuery] = useState('');
  const [showSearch, setShowSearch] = useState(false);

  // Get the current tag from the URL
  const currentTagId = searchParams?.get('tag');

  // Get tags data
  const { tags, isLoading } = useTags();

  const navItems = [
    {
      name: 'My Notebooks',
      href: '/notebooks',
      icon: Book,
      description: 'Browse all your notebooks',
      highlight: true,
    },
    {
      name: 'Calendar View',
      href: '/calendar',
      icon: Calendar,
      description: 'View notebooks by date',
    },
    {
      name: 'Chat with Luna',
      href: '/chat',
      icon: MessageSquare,
      description: 'Ask Luna about your journals',
      badge: 'AI',
    },
    {
      name: 'Insights',
      href: '/insights',
      icon: Sparkles,
      description: 'Discover patterns in your writing',
      badge: 'New',
    },
    {
      name: 'Saved Items',
      href: '/bookmarks',
      icon: Bookmark,
      description: 'View your saved notebooks',
    },
    {
      name: 'Profile',
      href: '/profile',
      icon: User,
      description: 'Manage your account',
    },
  ];

  // Check if a nav item is active
  const isActive = (item) => {
    if (item.href === '/notebooks' && pathname === '/notebooks') {
      return true;
    }

    if (item.href !== '/notebooks' && pathname.startsWith(item.href)) {
      return true;
    }

    return false;
  };

  // Handle navigation
  const handleNavigation = (href, e) => {
    if (e) {
      e.preventDefault();
      e.stopPropagation();
    }
    router.push(href);
    if (onClose) onClose();
  };

  // Handle logout
  const handleLogout = async () => {
    await signOut({ callbackUrl: '/' });
  };
import { motion, AnimatePresence } from 'framer-motion';
import { Book, Calendar, User, Plus, Tag, ChevronRight, ChevronLeft, 
  ChevronDown, Grid, Menu, LogOut, MessageSquare, Settings, 
  Bookmark, Sparkles, Search, Zap, Bell } from 'lucide-react';
import { useTags } from '@/lib/hooks';
import { cn } from '@/lib/utils';
import { Button } from '@/components/ui/button';
import { ModeToggle } from '@/components/mode-toggle';
import { Input } from '@/components/ui/input';
import {
  Sheet,
  SheetContent,
  SheetTrigger,
} from "@/components/ui/sheet";
import { signOut } from "next-auth/react";
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar";
import { Badge } from "@/components/ui/badge";
import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from "@/components/ui/tooltip";

const SidebarContent = ({ onClose, isCollapsed, onToggleCollapse }) => {
  const pathname = usePathname();
  const searchParams = useSearchParams();
  const { data: session } = useSession();
  const router = useRouter();
  const [showTags, setShowTags] = useState(false);
  const [searchQuery, setSearchQuery] = useState('');
  const [showSearch, setShowSearch] = useState(false);

  // Get the current tag from the URL
  const currentTagId = searchParams?.get('tag');

  // Get tags data using SWR
  const { tags, isLoading } = useTags();

  const navItems = [
    {
      name: 'My Notebooks',
      href: '/notebooks',
      icon: Book,
      description: 'Browse all your notebooks',
      highlight: true,
    },
    {
      name: 'Calendar View',
      href: '/calendar',
      icon: Calendar,
      description: 'View notebooks by date',
    },
    {
      name: 'Chat with Luna',
      href: '/chat',
      icon: MessageSquare,
      description: 'Ask Luna about your journals',
      badge: 'AI',
    },
    {
      name: 'Insights',
      href: '/insights',
      icon: Sparkles,
      description: 'Discover patterns in your writing',
      badge: 'New',
    },
    {
      name: 'Saved Items',
      href: '/bookmarks',
      icon: Bookmark,
      description: 'View your saved notebooks',
    },
    {
      name: 'Profile',
      href: '/profile',
      icon: User,
      description: 'Manage your account',
    },
  ];

  // Check if a nav item is active
  const isActive = (item) => {
    if (item.href === '/notebooks' && pathname === '/notebooks') {
      return true;
    }

    if (item.href !== '/notebooks' && pathname.startsWith(item.href)) {
      return true;
    }

    return false;
  };

  // Handle logout
  const handleLogout = async () => {
    await signOut({ callbackUrl: '/' });
  };

  // Sidebar animations
  const sidebarVariants = {
    expanded: { width: "280px", transition: { duration: 0.3, ease: "easeInOut" } },
    collapsed: { width: "80px", transition: { duration: 0.3, ease: "easeInOut" } }
  };

  return (
    <motion.div 
      className="h-full flex flex-col overflow-hidden bg-gradient-to-b from-background/95 to-background/90 border-r border-border/20"
      variants={sidebarVariants}
      initial={isCollapsed ? "collapsed" : "expanded"} // MODIFIED
      animate={isCollapsed ? "collapsed" : "expanded"}
      // style={{ width: isCollapsed ? "80px" : "280px" }} // REMOVED - let variants handle it
    >
      <div className="p-5 flex items-center justify-between">
        {!isCollapsed ? (
          <Link href={"/"} className="flex items-center space-x-2 group relative">
            <div className="relative">
              <motion.div 
                className="absolute -inset-2 bg-gradient-to-r from-violet-600/20 via-purple-600/20 to-indigo-600/20 rounded-full blur-md opacity-0 group-hover:opacity-100"
                animate={{
                  scale: [1, 1.05, 1],
                  opacity: [0, 0.5, 0],
                }}
                transition={{
                  duration: 2,
                  repeat: Infinity,
                  repeatType: "reverse",
                }}
              />
              <div className="h-9 w-9 rounded-xl bg-gradient-to-br from-violet-600 via-purple-600 to-indigo-600 flex items-center justify-center shadow-lg shadow-primary/20 group-hover:shadow-primary/40 transition-all relative z-10">
                <motion.span 
                  className="text-lg font-bold text-white"
                  animate={{ 
                    textShadow: ["0 0 8px rgba(255,255,255,0.3)", "0 0 16px rgba(255,255,255,0.5)", "0 0 8px rgba(255,255,255,0.3)"]
                  }}
                  transition={{ duration: 3, ease: "easeInOut", repeat: Infinity }}
                >
                  R
                </motion.span>
              </div>
            </div>
            <span className="text-xl font-bold bg-gradient-to-r from-violet-600 via-purple-600 to-indigo-600 text-transparent bg-clip-text group-hover:from-violet-500 group-hover:to-indigo-500 transition-all">Reflecto</span>
          </Link>
        ) : (
          // Collapsed Logo / Toggle Area
          <div className='w-full flex justify-center items-center'> {/* MODIFIED: wrapper for centering toggle */} 
            <Button
              variant="ghost"
              size="icon"
              onClick={(e) => {
                e.preventDefault();
                e.stopPropagation();
                onToggleCollapse?.();
              }}
              className="h-10 w-10 rounded-xl hover:bg-primary/10 transition-colors flex items-center justify-center" // MODIFIED: ensure centering and size
            >
              <ChevronRight className="h-5 w-5" /> {/* CHANGED from R to ChevronRight for toggle */} 
            </Button>
          </div>
        )}
        {!isCollapsed && (
          <Button
            variant="ghost"
            size="icon"
            onClick={(e) => {
              e.preventDefault();
              e.stopPropagation(); // ADDED
              onToggleCollapse?.();
            }}
            className="h-8 w-8 rounded-full hover:bg-primary/10 transition-colors"
          >
            <ChevronLeft className="h-4 w-4" />
          </Button>
        )}
      </div>

      <AnimatePresence>
        {showSearch && !isCollapsed && (
          <motion.div 
            className="px-4 mb-2"
            initial={{ opacity: 0, y: -10, height: 0 }}
            animate={{ opacity: 1, y: 0, height: 'auto' }}
            exit={{ opacity: 0, y: -10, height: 0 }}
            transition={{ duration: 0.2 }}
          >
            <div className="relative">
              <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-muted-foreground" />
              <Input
                placeholder="Search notebooks..."
                className="pl-9 py-5 h-9 bg-muted/50 border-none focus-visible:ring-1 focus-visible:ring-primary/30"
                value={searchQuery}
                onChange={(e) => setSearchQuery(e.target.value)}
              />
            </div>
          </motion.div>
        )}
      </AnimatePresence>

      <div className="px-4 mb-5">
        <div className="flex gap-2">
          <div className={isCollapsed ? "w-full" : "flex-1"}>
            <div className="relative group overflow-hidden">
              <div className="absolute -inset-0.5 bg-gradient-to-r from-violet-600 to-indigo-600 rounded-xl blur opacity-30 group-hover:opacity-100 animate-pulse transition duration-200"></div>
              <Button
                className={`${isCollapsed ? 'justify-center px-0' : 'justify-start'} w-full gap-2 h-11 relative bg-gradient-to-r from-violet-600/90 to-indigo-600/90 hover:from-violet-600 hover:to-indigo-600 text-white shadow-lg shadow-violet-600/20 hover:shadow-violet-600/40 transition-all border-0 rounded-lg`}
                onClick={(e) => {
                  e.preventDefault();
                  e.stopPropagation(); // ADDED
                  router.push("/notebooks?new=true");
                  onClose?.(); // MODIFIED
                }}
              >
                <Plus className={`${isCollapsed ? 'h-5 w-5' : 'h-4 w-4'} ${!isCollapsed && 'mr-1'}`} />
                {!isCollapsed && (
                  <span className="font-medium">New Notebook</span>
                )}
              </Button>
            </div>
          </div>
          
          {!isCollapsed && (
            <Button
              variant="outline"
              size="icon"
              onClick={() => setShowSearch(!showSearch)}
              className="h-11 w-11 rounded-lg border-muted flex-shrink-0 relative overflow-hidden hover:border-muted-foreground/30 transition-colors"
            >
              <motion.div 
                className="absolute inset-0 bg-gradient-to-r from-violet-600/5 to-indigo-600/5 opacity-0 group-hover:opacity-100"
                initial={{ opacity: 0 }}
                animate={{ opacity: showSearch ? 0.1 : 0 }}
              />
              <Search className="h-4 w-4" />
            </Button>
          )}
        </div>
      </div>

      <nav className="flex-1 px-3 py-2 space-y-1 overflow-y-auto scrollbar-thin scrollbar-thumb-primary/10 scrollbar-track-transparent">
        <TooltipProvider delayDuration={300}>
          <div className="space-y-1.5">
            {navItems.map((item) => (
              <React.Fragment key={item.href}>
                {isCollapsed ? (
                  <Tooltip>
                    <TooltipTrigger asChild>
                      <Button
                        variant={isActive(item) ? "secondary" : "ghost"}
                        className={cn(
                          "w-full rounded-lg h-11 transition-all group overflow-hidden",
                          "justify-center px-0",
                          isActive(item)
                            ? "bg-primary/10 text-primary font-medium shadow-sm"
                            : "text-muted-foreground hover:bg-muted/50 hover:text-foreground hover:shadow-sm"
                        )}
                        onClick={(e) => {
                          e.preventDefault();
                          e.stopPropagation(); // ADDED
                          const href = item.href;
                          router.push(href);
                          onClose?.(); // MODIFIED
                        }}
                      >
                        <motion.div 
                          className="absolute inset-0 bg-gradient-to-r from-violet-600/5 to-indigo-600/5 opacity-0 group-hover:opacity-100"
                          animate={{ opacity: isActive(item) ? 0.15 : 0 }}
                        />
                        <div className={cn(
                          "flex items-center justify-center",
                          "h-5 w-5",
                          isActive(item) 
                            ? "text-primary" 
                            : "text-muted-foreground group-hover:text-foreground"
                        )}>
                          <item.icon className="h-full w-full" />
                        </div>
                      </Button>
                    </TooltipTrigger>
                    <TooltipContent side="right" className="ml-1">
                      <div className="flex flex-col">
                        <span>{item.name}</span>
                        {item.description && <span className="text-xs text-muted-foreground">{item.description}</span>}
                      </div>
                    </TooltipContent>
                  </Tooltip>
                ) : (
                  <Button
                    variant={isActive(item) ? "secondary" : "ghost"}
                    className={cn(
                      "w-full rounded-lg h-11 transition-all group overflow-hidden",
                      "justify-start px-4",
                      isActive(item)
                        ? "bg-primary/10 text-primary font-medium shadow-sm"
                        : "text-muted-foreground hover:bg-muted/50 hover:text-foreground hover:shadow-sm"
                    )}
                    onClick={(e) => {
                      e.preventDefault();
                      e.stopPropagation(); // ADDED
                      const href = item.href;
                      router.push(href);
                      onClose?.(); // MODIFIED
                    }}
                  >
                    <motion.div 
                      className="absolute inset-0 bg-gradient-to-r from-violet-600/5 to-indigo-600/5 opacity-0 group-hover:opacity-100"
                      animate={{ opacity: isActive(item) ? 0.15 : 0 }}
                    />
                    <div className={cn(
                      "flex items-center justify-center",
                      "h-4.5 w-4.5 mr-3",
                      isActive(item) 
                        ? "text-primary" 
                        : "text-muted-foreground group-hover:text-foreground"
                    )}>
                      <item.icon className="h-full w-full" />
                    </div>
                    <span className="truncate font-medium text-sm">{item.name}</span>
                    {item.badge && (
                      <Badge variant={item.badge === 'AI' ? "default" : "outline"} className="ml-auto px-1.5 text-[10px]">
                        {item.badge}
                      </Badge>
                    )}
                    {isActive(item) && !item.badge && (
                      <div className="ml-auto bg-primary rounded-full h-1.5 w-1.5"></div>
                    )}
                  </Button>
                )}
              </React.Fragment>
            ))}
          </div>
        </TooltipProvider>

        {/* Tags Section */}
        <div className="mt-6 pt-5 border-t border-border/10">
          <TooltipProvider delayDuration={300}>
            {isCollapsed ? (
              <Tooltip>
                <TooltipTrigger asChild>
                  <Button
                    variant="ghost"
                    className={cn(
                      "w-full rounded-lg h-11 transition-all overflow-hidden",
                      "justify-center px-0",
                      "text-muted-foreground hover:bg-muted/50 hover:text-foreground"
                    )}
                    onClick={(e) => {
                      e.preventDefault(); 
                      onToggleCollapse?.(); // Expand sidebar when clicking on tags in collapsed mode
                    }}
                  >
                    <div className="flex items-center justify-center h-5 w-5">
                      <Tag className="h-full w-full" />
                    </div>
                  </Button>
                </TooltipTrigger>
                <TooltipContent side="right" className="ml-1">
                  <div className="flex flex-col">
                    <span>Tags</span>
                    <span className="text-xs text-muted-foreground">Click to expand and see tags</span>
                  </div>
                </TooltipContent>
              </Tooltip>
            ) : (
              <div
                className={cn(
                  "flex items-center justify-between px-3 py-2 text-sm font-medium rounded-lg",
                  "cursor-pointer hover:bg-muted/50 transition-colors",
                  showTags ? "bg-muted/50" : ""
                )}
                onClick={() => setShowTags(!showTags)}
              >
                <div className="flex items-center">
                  <div className={cn(
                    "flex items-center justify-center",
                    "h-4.5 w-4.5 mr-3",
                    "text-muted-foreground"
                  )}>
                    <Tag className="h-full w-full" />
                  </div>
                  <span className="text-sm">Tags</span>
                </div>
                <div className={cn(
                  "h-5 w-5 flex items-center justify-center rounded-full transition-all",
                  showTags ? "bg-muted" : ""
                )}>
                  <ChevronDown 
                    className="h-3.5 w-3.5" 
                    style={{ 
                      transform: showTags ? 'rotate(180deg)' : 'rotate(0deg)',
                      transition: 'transform 0.3s' 
                    }} 
                  />
                </div>
              </div>
            )}
          </TooltipProvider>

          <AnimatePresence>
            {showTags && !isCollapsed && (
              <motion.div 
                className="mt-2 space-y-1 pl-4 py-1.5 pr-2 bg-muted/20 rounded-lg mx-1"
                initial={{ opacity: 0, height: 0 }}
                animate={{ opacity: 1, height: 'auto' }}
                exit={{ opacity: 0, height: 0 }}
                transition={{ duration: 0.2 }}
              >
                {isLoading ? (
                  <div className="flex items-center justify-center py-3 text-xs text-muted-foreground">
                    <svg className="animate-spin -ml-1 mr-2 h-4 w-4 text-primary/70" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                      <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="3"></circle>
                      <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                    </svg>
                    <span>Loading tags...</span>
                  </div>
                ) : tags && tags.length > 0 ? (
                  <>
                    {tags.map(tag => (
                      <div
                        key={tag.id}
                        className={cn(
                          "flex items-center justify-between px-3 py-2 text-xs rounded-md group transition-all cursor-pointer",
                          currentTagId === tag.id
                            ? "bg-primary/10 text-primary font-medium shadow-sm"
                            : "text-muted-foreground hover:bg-muted/70 hover:text-foreground hover:shadow-sm"
                        )}
                        onClick={(e) => {
                          e.preventDefault();
                          e.stopPropagation(); // ADDED
                          router.push(`/notebooks?tag=${tag.id}`);
                          onClose?.(); // MODIFIED
                        }}
                      >
                        <div className="flex items-center">
                          <span className={cn(
                            "h-1.5 w-1.5 rounded-full mr-2",
                            currentTagId === tag.id ? "bg-primary" : "bg-muted-foreground/50 group-hover:bg-foreground/50"
                          )}></span>
                          <span className="truncate">{tag.name}</span>
                        </div>
                        <span className={cn(
                          "text-xs px-1.5 py-0.5 rounded-full ml-1 flex-shrink-0 transition-colors",
                          currentTagId === tag.id 
                            ? "bg-primary/20 text-primary" 
                            : "bg-muted-foreground/10 text-muted-foreground group-hover:bg-foreground/10 group-hover:text-foreground"
                        )}>{tag.count}</span>
                      </div>
                    ))}

                    <div
                      className="flex items-center px-3 py-2 text-xs rounded-md text-primary/80 hover:text-primary hover:bg-primary/5 transition-colors cursor-pointer"
                      onClick={(e) => { // MODIFIED: added e
                        e.preventDefault(); // ADDED
                        e.stopPropagation(); // ADDED
                        router.push("/tags"); // MODIFIED
                        onClose?.(); // MODIFIED
                      }}
                    >
                      <div className="flex items-center justify-center h-3.5 w-3.5 rounded-full bg-primary/10 mr-2">
                        <Plus className="h-2 w-2 text-primary" />
                      </div>
                      <span className="font-medium">Manage all tags</span>
                    </div>
                  </>
                ) : (
                  <div className="px-3 py-4 text-xs text-muted-foreground flex flex-col items-center justify-center space-y-2">
                    <Tag className="h-5 w-5 text-muted-foreground/50" />
                    <span>No tags found</span>
                    <Link 
                      href="/tags" 
                      className="text-primary hover:text-primary/80 font-medium"
                      onClick={onClose}
                    >
                      Create a tag
                    </Link>
                  </div>
                )}
              </motion.div>
            )}
          </AnimatePresence>
        </div>
      </nav>

      <div className="px-4 pt-4 mt-auto">
        <div className="border-t border-border/20 pt-4 pb-2">
          {session?.user ? (
            <div className="space-y-3">
              {!isCollapsed ? (
                <motion.div 
                  className="flex items-center gap-3 p-2.5 rounded-lg hover:bg-muted/60 transition-all cursor-pointer group relative"
                  whileHover={{
                    boxShadow: "0 4px 12px rgba(0,0,0,0.05)",
                    y: -2
                  }}
                >
                  <div className="relative">
                    <motion.div 
                      className="absolute inset-0 bg-gradient-to-r from-violet-600/20 to-indigo-600/20 rounded-full blur-md opacity-0 group-hover:opacity-100"
                      animate={{
                        scale: [1, 1.05, 1],
                        opacity: [0, 0.3, 0],
                      }}
                      transition={{
                        duration: 2,
                        repeat: Infinity,
                        repeatType: "loop",
                      }}
                    />
                    <Avatar className="h-10 w-10 flex-shrink-0 border-2 border-background shadow-sm">
                      <AvatarImage src={session.user.image} alt={session.user.name} />
                      <AvatarFallback className="bg-gradient-to-br from-violet-600/80 to-indigo-600/80 text-white">
                        {session.user.name?.charAt(0) || 'U'}
                      </AvatarFallback>
                    </Avatar>
                  </div>
                  <div className="flex-1 min-w-0">
                    <p className="text-sm font-medium truncate group-hover:text-primary transition-colors">{session.user.name}</p>
                    <p className="text-xs text-muted-foreground truncate">{session.user.email}</p>
                  </div>
                  
                  <div className="flex gap-1">
                    <Link href="/settings">
                      <Button 
                        variant="ghost" 
                        size="icon" 
                        className="h-8 w-8 rounded-full hover:bg-muted transition-colors"
                      >
                        <Settings className="h-4 w-4 text-muted-foreground" />
                      </Button>
                    </Link>
                    <ModeToggle />
                  </div>
                </motion.div>
              ) : (
                <div className="flex justify-center mb-3">
                  <TooltipProvider delayDuration={300} skipDelayDuration={0}>
                    <Tooltip>
                      <TooltipTrigger asChild>
                        <div className="relative cursor-pointer">
                          <motion.div 
                            className="absolute inset-0 bg-gradient-to-r from-violet-600/20 to-indigo-600/20 rounded-full blur-md opacity-0 hover:opacity-100"
                            initial={{ opacity: 0 }}
                            whileHover={{ 
                              opacity: [0, 0.3, 0],
                              scale: [1, 1.05, 1],
                              transition: {
                                duration: 2,
                                repeat: Infinity,
                                repeatType: "loop",
                              }
                            }}
                          />
                          <Avatar className="h-9 w-9 border-2 border-background shadow-sm">
                            <AvatarImage src={session.user.image} alt={session.user.name} />
                            <AvatarFallback className="bg-gradient-to-br from-violet-600/80 to-indigo-600/80 text-white">
                              {session.user.name?.charAt(0) || 'U'}
                            </AvatarFallback>
                          </Avatar>
                        </div>
                      </TooltipTrigger>
                      <TooltipContent side="right" className="ml-1" sideOffset={5}>
                        <div className="flex flex-col">
                          <span className="font-medium">{session.user.name}</span>
                          <span className="text-xs text-muted-foreground">{session.user.email}</span>
                        </div>
                      </TooltipContent>
                    </Tooltip>
                  </TooltipProvider>
                </div>
              )}

              <div className="flex items-center gap-2">
                {!isCollapsed ? (
                  <Button
                    variant="outline"
                    className="flex-1 justify-start text-sm gap-2.5 h-10 border-muted-foreground/20 hover:border-muted-foreground/30 hover:bg-background/80 transition-all"
                    onClick={handleLogout}
                  >
                    <LogOut className="h-3.5 w-3.5 text-muted-foreground" />
                    <span>Sign Out</span>
                  </Button>
                ) : (
                  <div className="flex w-full flex-col gap-2">
                    <TooltipProvider delayDuration={300} skipDelayDuration={0}>
                      <Tooltip>
                        <TooltipTrigger asChild>
                          <Button
                            variant="outline"
                            size="icon"
                            className="w-full h-9 border-muted-foreground/20 hover:border-muted-foreground/30 transition-colors"
                            onClick={handleLogout}
                          >
                            <LogOut className="h-3.5 w-3.5 text-muted-foreground" />
                          </Button>
                        </TooltipTrigger>
                        <TooltipContent side="right" sideOffset={5}>
                          <span>Sign out</span>
                        </TooltipContent>
                      </Tooltip>
                    </TooltipProvider>
                    
                    <ModeToggle className="w-full" />
                  </div>
                )}
              </div>
            </div>
          ) : (
            <div className="flex flex-col space-y-3">
              {!isCollapsed ? (
                <>
                  <div className="p-2.5 rounded-lg bg-muted/40 flex items-center justify-between">
                    <span className="text-sm font-medium">Not signed in</span>
                    <ModeToggle />
                  </div>
                  <Button className="w-full bg-gradient-to-r from-violet-600 to-indigo-600 hover:from-violet-600/90 hover:to-indigo-600/90 text-white border-0 shadow-md shadow-violet-600/20 hover:shadow-violet-600/30">
                    Sign In
                  </Button>
                </>
              ) : (
                <div className="flex items-center gap-2">
                  <Button variant="outline" size="icon" className="w-full">
                    <User className="h-4 w-4" />
                  </Button>
                  <ModeToggle className="w-full" />
                </div>
              )}
            </div>
          )}
        </div>
      </div>
    </motion.div>
  );
};

// Client component that uses useSearchParams
const SidebarWithParams = () => {
  // Persist sidebar collapse state using localStorage
  const [isCollapsed, setIsCollapsed] = useState(() => {
    // Check if we're in the browser environment
    if (typeof window !== 'undefined') {
      const savedState = localStorage.getItem('sidebarCollapsed');
      return savedState === 'true';
    }
    return false;
  });

  const handleToggleCollapse = () => {
    const newState = !isCollapsed;
    setIsCollapsed(newState);
    // Save to localStorage
    if (typeof window !== 'undefined') {
      localStorage.setItem('sidebarCollapsed', newState.toString());
    }
  };

  return (
    <>
      {/* Desktop sidebar - now works with ResizablePanel */}
      <div className="h-full flex-shrink-0" style={{ width: isCollapsed ? "80px" : "280px" }}>
        <SidebarContent
          onClose={() => {}}
          isCollapsed={isCollapsed}
          onToggleCollapse={handleToggleCollapse}
        />
      </div>

      {/* Mobile sidebar with Sheet */}
      <div className="md:hidden fixed top-0 left-0 right-0 z-40 flex items-center justify-between px-4 py-3 border-b bg-background/95 backdrop-blur-lg supports-[backdrop-filter]:bg-background/60 shadow-sm">
        <Sheet>
          <SheetTrigger asChild>
            <Button variant="ghost" size="icon" className="hover:bg-muted/70 transition-colors rounded-lg">
              <Menu className="h-5 w-5" />
            </Button>
          </SheetTrigger>
          <SheetContent side="left" className="p-0 w-80 border-r border-border/40 shadow-2xl">
            <SidebarContent onClose={() => document.body.click()} />
          </SheetContent>
        </Sheet>

        <Link href="/">
          <div className="flex items-center space-x-2">
            <div className="h-8 w-8 rounded-lg bg-gradient-to-br from-violet-600 via-purple-600 to-indigo-600 flex items-center justify-center shadow-lg shadow-primary/10">
              <span className="text-lg font-bold text-white">R</span>
            </div>
            <h2 className="text-xl font-bold bg-gradient-to-r from-violet-600 via-purple-600 to-indigo-600 text-transparent bg-clip-text">Reflecto</h2>
          </div>
        </Link>

        <div className="flex items-center gap-2">
          <ModeToggle />
          <Link href="/notebooks?new=true">
            <Button
              variant="default"
              size="icon"
              className="rounded-full bg-gradient-to-r from-violet-600 to-indigo-600 hover:from-violet-600/90 hover:to-indigo-600/90 text-white shadow-md shadow-violet-600/20 hover:shadow-violet-600/30"
            >
              <Plus className="h-5 w-5" />
            </Button>
          </Link>
        </div>
      </div>

      {/* Add padding to the top on mobile to account for the fixed header */}
      <div className="md:hidden h-16"></div>
    </>
  );
};

// Loading fallback for Suspense
const SidebarFallback = () => {
  return (
    <div className="h-full w-full border-r border-border/40 bg-background/95 backdrop-blur supports-[backdrop-filter]:bg-background/60 flex flex-col p-6 space-y-8">
      <div className="flex items-center space-x-2">
        <div className="h-8 w-8 rounded-lg bg-muted animate-pulse"></div>
        <div className="h-6 w-24 bg-muted rounded-md animate-pulse"></div>
      </div>
      
      <div className="h-10 bg-muted rounded-lg w-full animate-pulse"></div>
      
      <div className="space-y-2">
        <div className="h-10 bg-muted rounded-md w-full animate-pulse"></div>
        <div className="h-10 bg-muted rounded-md w-full animate-pulse opacity-70"></div>
        <div className="h-10 bg-muted rounded-md w-full animate-pulse opacity-80"></div>
        <div className="h-10 bg-muted rounded-md w-full animate-pulse opacity-60"></div>
      </div>
      
      <div className="mt-auto">
        <div className="h-16 bg-muted rounded-lg w-full animate-pulse opacity-50"></div>
      </div>
    </div>
  );
};

// Main component that wraps the client component in Suspense
const PremiumNotebookSidebar = () => {
  return (
    <Suspense fallback={<SidebarFallback />}>
      <SidebarWithParams />
    </Suspense>
  );
};

export default PremiumNotebookSidebar;
